using System;
using System.ComponentModel.Design;
internal class Program
{
    public static void Main()
    {
        int[] d = new int[10];
        input(d);
        prinInput(d);
        RemoveEle(d, 6);
        static void input(int[] d)
        {
            Random rnd = new Random();
            for (int i = 0; i < d.Length; i++)
            {
                d[i] = rnd.Next(50);
            }
        }
        static void prinInput(int[] d)
        {
            foreach (int i in d)
            {
                Console.Write($"{i}, ");
                //Console.WriteLine("\n");
            }
        }
        //1.1
        double avg = Average(d);
        Console.WriteLine("\n");
        Console.WriteLine($"TB day la: {avg}");
        static double Average(int[] d)
        {
            double sum = 0.0;
            foreach (int v in d)
            {
                sum += v;
            }
            return sum / 10;
        }
        //1.2
        bool ch = check(d, 5);
        Console.WriteLine($"Phan tu 5 check -> {ch}");
        static bool check(int[] d, int value)
        {
            foreach (int val in d)
                if (val == value)
                {
                    return true;
                }
            return false;
        }
        //1.3
        int k = 36;
        int c = inDex(d, k);
        Console.WriteLine($"Vi tri cua {k} trong day la: {c} ");
        if (c < 0)
        {
            Console.WriteLine("Khong tim thay vi tri");
        }
        static int inDex(int[] d, int tim)
        {
            for (int i = 0; i < d.Length; i++)
            {
                if (d[i] == tim)
                    return i;
            }
            return -1;
        }
        //1.4
        static bool RemoveEle(int[] d, int ele)
        {
            for (int i = 0; i < d.Length; i++)
            {
                if (d[i] == ele)
                {
                    for (int k = i; k < d.Length - 1; k++)
                    {
                        d[k] = d[k + 1];
                    }
                    return true;
                }
            }
            return false;
        }
        Console.WriteLine(RemoveEle(d, 6));
        //1.5
        static void maxMin(int[] d)
        {
            int lon = d[0];
            int nho = d[0];
            foreach (int val in d)
            {
                if (val > lon) lon = val;
                if (val < nho) nho = val;
            }
            Console.WriteLine($" Max Min la: {lon}, {nho} ");
        }
        maxMin(d);
        //1.6
        static int[] reverseDay(int[] d)
        {
            for (int i = d.Length - 1; i >= 0; i--)
            {
                Console.Write($"{d[i]} ");
            }
            return d;
        }
        reverseDay(d);
        Console.WriteLine();
        //1.7
        bool q = checking(d);
        static bool checking(int[] d)
        {
            for (int i = 0; i < d.Length; i++)
            {
                for (int j = i + 1; j < d.Length; j++)
                {
                    if (d[j] == d[i])
                    {
                        Console.WriteLine($"phan tu lap la: {d[j]}");
                        return true;
                    }
                }
            }
            return false;
        }
        if (q == false)
        {
            Console.WriteLine("Khong co phan tu lap");
        }   
       //1.8
       static bool RemoveDup (int[] d)
        {
            for (int i=0; i < d.Length; i++)
            {
                for (int j=i + 1;j < d.Length; j++)
                {
                    if (d[j] == d[i])
                    {
                        for (int k=i; k < d.Length-1; k++)
                        {
                            d[k] = d[k+1];
                        }
                        return true;
                    }    
                }   
            }
            return false;
        }
        Console.WriteLine(RemoveDup(d));
    }
}

 
